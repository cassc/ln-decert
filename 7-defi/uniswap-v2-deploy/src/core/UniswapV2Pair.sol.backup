pragma solidity =0.5.16;

import './interfaces/IUniswapV2Pair.sol';
import './UniswapV2ERC20.sol';
import './libraries/Math.sol';
import './libraries/UQ112x112.sol';
import './interfaces/IERC20.sol';
import './interfaces/IUniswapV2Factory.sol';
import './interfaces/IUniswapV2Callee.sol';

/**
 * @title UniswapV2Pair
 * @notice Uniswap V2 交易对合约 - 实现恒定乘积做市商 (x * y = k)
 * @dev 每个交易对是一个独立的合约实例，管理两个 ERC20 代币之间的流动性
 *
 * 核心概念：
 * 1. 恒定乘积公式：reserve0 * reserve1 = k（扣除手续费后 k 只增不减）
 * 2. 流动性代币：LP 代币代表用户在池中的份额
 * 3. 价格预言机：累积价格用于链上 TWAP 价格预言机
 * 4. 闪电贷：支持闪电交换功能
 */
contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {
    using SafeMath  for uint;
    using UQ112x112 for uint224;

    // 最小流动性锁定量（永久锁定在地址0，防止除零错误）
    uint public constant MINIMUM_LIQUIDITY = 10**3;

    // ERC20 transfer 函数选择器，用于低级调用
    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));

    address public factory;  // Factory 合约地址
    address public token0;   // 第一个代币地址（地址较小）
    address public token1;   // 第二个代币地址（地址较大）

    // 储备量使用 uint112 存储，节省 gas（2个储备 + 时间戳可以打包在一个 slot）
    uint112 private reserve0;           // 代币0的储备量
    uint112 private reserve1;           // 代币1的储备量
    uint32  private blockTimestampLast; // 最后更新储备量的区块时间戳

    // 价格累积器，用于 TWAP 价格预言机
    // 每个区块首次交易时更新：price = reserve1 / reserve0
    uint public price0CumulativeLast;  // token0 的累积价格
    uint public price1CumulativeLast;  // token1 的累积价格

    // 用于计算协议手续费的最后一个 k 值
    uint public kLast;

    // 重入锁
    uint private unlocked = 1;
    modifier lock() {
        require(unlocked == 1, 'UniswapV2: LOCKED');
        unlocked = 0;
        _;
        unlocked = 1;
    }

    /**
     * @notice 获取当前储备量
     * @return _reserve0 代币0储备量
     * @return _reserve1 代币1储备量
     * @return _blockTimestampLast 最后更新时间戳
     */
    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {
        _reserve0 = reserve0;
        _reserve1 = reserve1;
        _blockTimestampLast = blockTimestampLast;
    }

    /**
     * @notice 安全转账 ERC20 代币
     * @param token 代币地址
     * @param to 接收地址
     * @param value 转账数量
     */
    function _safeTransfer(address token, address to, uint value) private {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');
    }

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    constructor() public {
        factory = msg.sender;
    }

    /**
     * @notice 初始化交易对（只能调用一次）
     * @param _token0 第一个代币地址
     * @param _token1 第二个代币地址
     * @dev 由 Factory 在创建交易对时调用
     */
    function initialize(address _token0, address _token1) external {
        require(msg.sender == factory, 'UniswapV2: FORBIDDEN');
        token0 = _token0;
        token1 = _token1;
    }

    /**
     * @notice 更新储备量和价格累积器
     * @dev 每次流动性变化时调用，更新价格预言机数据
     *
     * 价格预言机原理：
     * - 记录每秒的价格累积值
     * - 外部合约可以用两个时间点的差值计算 TWAP
     * - 使用 UQ112x112 定点数防止溢出
     */
    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {
        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');

        uint32 blockTimestamp = uint32(block.timestamp % 2**32);
        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // 溢出是可以接受的

        // 如果时间流逝 > 0 且储备量不为 0，更新价格累积器
        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {
            // * 永不溢出，并且 + 也不会溢出，因为累加了 2^32-1 次
            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;
            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;
        }

        reserve0 = uint112(balance0);
        reserve1 = uint112(balance1);
        blockTimestampLast = blockTimestamp;
        emit Sync(reserve0, reserve1);
    }

    /**
     * @notice 如果开启了协议手续费，铸造流动性代币给 feeTo 地址
     * @dev 协议手续费是从 LP 手续费中抽取的
     *
     * 手续费计算：
     * - 交易手续费 0.3%，全部给 LP
     * - 如果开启协议费，从 LP 收益中抽取 1/6（实际为总交易额的 0.05%）
     */
    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {
        address feeTo = IUniswapV2Factory(factory).feeTo();
        feeOn = feeTo != address(0);
        uint _kLast = kLast;
        if (feeOn) {
            if (_kLast != 0) {
                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));
                uint rootKLast = Math.sqrt(_kLast);
                if (rootK > rootKLast) {
                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));
                    uint denominator = rootK.mul(5).add(rootKLast);
                    uint liquidity = numerator / denominator;
                    if (liquidity > 0) _mint(feeTo, liquidity);
                }
            }
        } else if (_kLast != 0) {
            kLast = 0;
        }
    }

    /**
     * @notice 铸造流动性代币（添加流动性）
     * @param to 接收 LP 代币的地址
     * @return liquidity 铸造的 LP 代币数量
     * @dev 用户需要先将代币转入合约，然后调用此函数
     *
     * 流动性计算：
     * - 首次添加：liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
     * - 后续添加：liquidity = min(amount0/reserve0, amount1/reserve1) * totalSupply
     */
    function mint(address to) external lock returns (uint liquidity) {
        (uint112 _reserve0, uint112 _reserve1,) = getReserves();
        uint balance0 = IERC20(token0).balanceOf(address(this));
        uint balance1 = IERC20(token1).balanceOf(address(this));
        uint amount0 = balance0.sub(_reserve0);
        uint amount1 = balance1.sub(_reserve1);

        bool feeOn = _mintFee(_reserve0, _reserve1);
        uint _totalSupply = totalSupply;

        if (_totalSupply == 0) {
            // 首次添加流动性
            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);
           _mint(address(0), MINIMUM_LIQUIDITY); // 永久锁定最小流动性
        } else {
            // 后续添加：按比例计算 LP 代币
            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);
        }

        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');
        _mint(to, liquidity);

        _update(balance0, balance1, _reserve0, _reserve1);
        if (feeOn) kLast = uint(reserve0).mul(reserve1);
        emit Mint(msg.sender, amount0, amount1);
    }

    /**
     * @notice 销毁流动性代币（移除流动性）
     * @param to 接收底层代币的地址
     * @return amount0 返还的 token0 数量
     * @return amount1 返还的 token1 数量
     * @dev 用户需要先将 LP 代币转入合约，然后调用此函数
     */
    function burn(address to) external lock returns (uint amount0, uint amount1) {
        (uint112 _reserve0, uint112 _reserve1,) = getReserves();
        address _token0 = token0;
        address _token1 = token1;
        uint balance0 = IERC20(_token0).balanceOf(address(this));
        uint balance1 = IERC20(_token1).balanceOf(address(this));
        uint liquidity = balanceOf[address(this)];

        bool feeOn = _mintFee(_reserve0, _reserve1);
        uint _totalSupply = totalSupply;

        // 按 LP 代币比例返还底层资产
        amount0 = liquidity.mul(balance0) / _totalSupply;
        amount1 = liquidity.mul(balance1) / _totalSupply;

        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');

        _burn(address(this), liquidity);
        _safeTransfer(_token0, to, amount0);
        _safeTransfer(_token1, to, amount1);

        balance0 = IERC20(_token0).balanceOf(address(this));
        balance1 = IERC20(_token1).balanceOf(address(this));

        _update(balance0, balance1, _reserve0, _reserve1);
        if (feeOn) kLast = uint(reserve0).mul(reserve1);
        emit Burn(msg.sender, amount0, amount1, to);
    }

    /**
     * @notice 执行代币交换
     * @param amount0Out 输出的 token0 数量
     * @param amount1Out 输出的 token1 数量
     * @param to 接收代币的地址
     * @param data 如果非空，将调用接收地址的回调函数（闪电交换）
     * @dev 用户需要先将输入代币转入合约
     *
     * 交换流程：
     * 1. 验证输出量有效
     * 2. 先转出代币（支持闪电交换）
     * 3. 如果有 data，调用回调函数
     * 4. 验证恒定乘积公式（考虑 0.3% 手续费）
     */
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {
        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');
        (uint112 _reserve0, uint112 _reserve1,) = getReserves();
        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');

        uint balance0;
        uint balance1;
        {
        address _token0 = token0;
        address _token1 = token1;
        require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');

        // 先转出代币（支持闪电贷）
        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);
        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);

        // 如果有 data，执行闪电交换回调
        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);

        balance0 = IERC20(_token0).balanceOf(address(this));
        balance1 = IERC20(_token1).balanceOf(address(this));
        }

        // 计算实际转入的代币数量
        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;
        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;
        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');

        {
        // 验证恒定乘积公式，考虑 0.3% 手续费
        // balance * 1000 - amountIn * 3 相当于扣除了 0.3% 手续费后的余额
        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));
        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));
        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');
        }

        _update(balance0, balance1, _reserve0, _reserve1);
        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);
    }

    /**
     * @notice 强制平衡匹配储备量
     * @param to 接收多余代币的地址
     * @dev 将多余的代币发送给 to 地址
     */
    function skim(address to) external lock {
        address _token0 = token0;
        address _token1 = token1;
        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));
        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));
    }

    /**
     * @notice 强制储备量匹配余额
     * @dev 用于处理直接转账到合约的代币，或处理通缩/通胀代币
     */
    function sync() external lock {
        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);
    }
}
